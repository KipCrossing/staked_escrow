/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StakedEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelEscrow"
      | "completeTrade"
      | "createEscrow"
      | "deposit"
      | "escrows"
      | "name"
      | "nextEscrowId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "EscrowCancelled"
      | "EscrowCreated"
      | "TradeCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextEscrowId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextEscrowId",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    _escrowId: BigNumberish,
    _from: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_escrowId: bigint, _from: string, _value: bigint];
  export interface OutputObject {
    _escrowId: bigint;
    _from: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCancelledEvent {
  export type InputTuple = [_escrowId: BigNumberish];
  export type OutputTuple = [_escrowId: bigint];
  export interface OutputObject {
    _escrowId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCreatedEvent {
  export type InputTuple = [
    _escrowId: BigNumberish,
    _merchant: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _escrowId: bigint,
    _merchant: string,
    _value: bigint
  ];
  export interface OutputObject {
    _escrowId: bigint;
    _merchant: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCompletedEvent {
  export type InputTuple = [_escrowId: BigNumberish, _from: AddressLike];
  export type OutputTuple = [_escrowId: bigint, _from: string];
  export interface OutputObject {
    _escrowId: bigint;
    _from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakedEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): StakedEscrow;
  waitForDeployment(): Promise<this>;

  interface: StakedEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelEscrow: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeTrade: TypedContractMethod<
    [_escrowId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEscrow: TypedContractMethod<
    [_amount: BigNumberish, _details: string],
    [bigint],
    "payable"
  >;

  deposit: TypedContractMethod<[_escrowId: BigNumberish], [void], "payable">;

  escrows: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        buyer: string;
        merchant: string;
        amount: bigint;
        details: string;
        isDead: boolean;
      }
    ],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextEscrowId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelEscrow"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeTrade"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEscrow"
  ): TypedContractMethod<
    [_amount: BigNumberish, _details: string],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_escrowId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "escrows"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        buyer: string;
        merchant: string;
        amount: bigint;
        details: string;
        isDead: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextEscrowId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCancelled"
  ): TypedContractEvent<
    EscrowCancelledEvent.InputTuple,
    EscrowCancelledEvent.OutputTuple,
    EscrowCancelledEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCreated"
  ): TypedContractEvent<
    EscrowCreatedEvent.InputTuple,
    EscrowCreatedEvent.OutputTuple,
    EscrowCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TradeCompleted"
  ): TypedContractEvent<
    TradeCompletedEvent.InputTuple,
    TradeCompletedEvent.OutputTuple,
    TradeCompletedEvent.OutputObject
  >;

  filters: {
    "Deposit(uint256,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EscrowCancelled(uint256)": TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;
    EscrowCancelled: TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;

    "EscrowCreated(uint256,address,uint256)": TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;
    EscrowCreated: TypedContractEvent<
      EscrowCreatedEvent.InputTuple,
      EscrowCreatedEvent.OutputTuple,
      EscrowCreatedEvent.OutputObject
    >;

    "TradeCompleted(uint256,address)": TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;
    TradeCompleted: TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;
  };
}
