/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SingleStakedEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelEscrow"
      | "cancelTrade"
      | "completeTrade"
      | "deposit"
      | "enterTrade"
      | "isDead"
      | "isDeposited"
      | "isTrading"
      | "merchantContactDetails"
      | "name"
      | "requestedGoodsDescription"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "EscrowCancelled"
      | "TradeCancelled"
      | "TradeCompleted"
      | "TradeEntered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeTrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enterTrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDead", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isTrading", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "merchantContactDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestedGoodsDescription",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enterTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTrading", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "merchantContactDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestedGoodsDescription",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [_from: AddressLike, _value: BigNumberish];
  export type OutputTuple = [_from: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCancelledEvent {
  export type InputTuple = [_from: AddressLike];
  export type OutputTuple = [_from: string];
  export interface OutputObject {
    _from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeCompletedEvent {
  export type InputTuple = [_from: AddressLike];
  export type OutputTuple = [_from: string];
  export interface OutputObject {
    _from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEnteredEvent {
  export type InputTuple = [_from: AddressLike, _value: BigNumberish];
  export type OutputTuple = [_from: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SingleStakedEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): SingleStakedEscrow;
  waitForDeployment(): Promise<this>;

  interface: SingleStakedEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelEscrow: TypedContractMethod<[], [void], "nonpayable">;

  cancelTrade: TypedContractMethod<[], [void], "nonpayable">;

  completeTrade: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<[], [void], "payable">;

  enterTrade: TypedContractMethod<[], [void], "payable">;

  isDead: TypedContractMethod<[], [boolean], "view">;

  isDeposited: TypedContractMethod<[], [boolean], "view">;

  isTrading: TypedContractMethod<[], [boolean], "view">;

  merchantContactDetails: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  requestedGoodsDescription: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelEscrow"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelTrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeTrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "enterTrade"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "isDead"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDeposited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTrading"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "merchantContactDetails"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestedGoodsDescription"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EscrowCancelled"
  ): TypedContractEvent<
    EscrowCancelledEvent.InputTuple,
    EscrowCancelledEvent.OutputTuple,
    EscrowCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TradeCancelled"
  ): TypedContractEvent<
    TradeCancelledEvent.InputTuple,
    TradeCancelledEvent.OutputTuple,
    TradeCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TradeCompleted"
  ): TypedContractEvent<
    TradeCompletedEvent.InputTuple,
    TradeCompletedEvent.OutputTuple,
    TradeCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TradeEntered"
  ): TypedContractEvent<
    TradeEnteredEvent.InputTuple,
    TradeEnteredEvent.OutputTuple,
    TradeEnteredEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EscrowCancelled()": TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;
    EscrowCancelled: TypedContractEvent<
      EscrowCancelledEvent.InputTuple,
      EscrowCancelledEvent.OutputTuple,
      EscrowCancelledEvent.OutputObject
    >;

    "TradeCancelled(address)": TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;
    TradeCancelled: TypedContractEvent<
      TradeCancelledEvent.InputTuple,
      TradeCancelledEvent.OutputTuple,
      TradeCancelledEvent.OutputObject
    >;

    "TradeCompleted(address)": TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;
    TradeCompleted: TypedContractEvent<
      TradeCompletedEvent.InputTuple,
      TradeCompletedEvent.OutputTuple,
      TradeCompletedEvent.OutputObject
    >;

    "TradeEntered(address,uint256)": TypedContractEvent<
      TradeEnteredEvent.InputTuple,
      TradeEnteredEvent.OutputTuple,
      TradeEnteredEvent.OutputObject
    >;
    TradeEntered: TypedContractEvent<
      TradeEnteredEvent.InputTuple,
      TradeEnteredEvent.OutputTuple,
      TradeEnteredEvent.OutputObject
    >;
  };
}
